/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAuthenticationArgs } from "./CreateAuthenticationArgs";
import { UpdateAuthenticationArgs } from "./UpdateAuthenticationArgs";
import { DeleteAuthenticationArgs } from "./DeleteAuthenticationArgs";
import { AuthenticationCountArgs } from "./AuthenticationCountArgs";
import { AuthenticationFindManyArgs } from "./AuthenticationFindManyArgs";
import { AuthenticationFindUniqueArgs } from "./AuthenticationFindUniqueArgs";
import { Authentication } from "./Authentication";
import { AuthenticationService } from "../authentication.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Authentication)
export class AuthenticationResolverBase {
  constructor(
    protected readonly service: AuthenticationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Authentication",
    action: "read",
    possession: "any",
  })
  async _authenticationsMeta(
    @graphql.Args() args: AuthenticationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Authentication])
  @nestAccessControl.UseRoles({
    resource: "Authentication",
    action: "read",
    possession: "any",
  })
  async authentications(
    @graphql.Args() args: AuthenticationFindManyArgs
  ): Promise<Authentication[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Authentication, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Authentication",
    action: "read",
    possession: "own",
  })
  async authentication(
    @graphql.Args() args: AuthenticationFindUniqueArgs
  ): Promise<Authentication | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Authentication)
  @nestAccessControl.UseRoles({
    resource: "Authentication",
    action: "create",
    possession: "any",
  })
  async createAuthentication(
    @graphql.Args() args: CreateAuthenticationArgs
  ): Promise<Authentication> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Authentication)
  @nestAccessControl.UseRoles({
    resource: "Authentication",
    action: "update",
    possession: "any",
  })
  async updateAuthentication(
    @graphql.Args() args: UpdateAuthenticationArgs
  ): Promise<Authentication | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Authentication)
  @nestAccessControl.UseRoles({
    resource: "Authentication",
    action: "delete",
    possession: "any",
  })
  async deleteAuthentication(
    @graphql.Args() args: DeleteAuthenticationArgs
  ): Promise<Authentication | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
